# WebKaizen - Reglas de Desarrollo

## üéØ Contexto del Proyecto
Aplicaci√≥n React corporativa para empresa de servicios de gas natural e instalaciones. Enfoque en dise√±o responsivo, componentes reutilizables y experiencia de usuario optimizada.

## üèóÔ∏è Arquitectura y Estructura

### Organizaci√≥n de Archivos
- `src/components/`: Componentes reutilizables organizados por carpetas con index.js
- `src/pages/`: P√°ginas principales de la aplicaci√≥n
- `src/layouts/`: Layouts principales (MainLayout)
- `src/routes/`: Configuraci√≥n de rutas centralizadas
- `src/assets/`: Recursos organizados por tipo (image/, fonts/)
- `src/config/`: Archivos de configuraci√≥n (galeria.json)
- `src/styles/`: Estilos globales y sistema de temas
- `src/docs/`: Documentaci√≥n de componentes

### Convenciones de Nomenclatura
- Componentes: PascalCase (ej: `ServiceCard`, `WhatsAppButton`)
- Archivos: PascalCase para componentes, camelCase para utilidades
- Carpetas: PascalCase para componentes, camelCase para otros
- Variables y funciones: camelCase
- Constantes: SCREAMING_SNAKE_CASE
- Rutas: kebab-case para URLs (/gas-natural, /nosotros)

## üé® Sistema de Dise√±o

### Clases de Utilidad Responsiva (OBLIGATORIO usar en lugar de Tailwind repetitivo)
```css
/* Tipograf√≠a */
.heading-1    /* En lugar de text-2xl sm:text-3xl md:text-4xl lg:text-5xl */
.heading-2    /* En lugar de text-xl sm:text-2xl md:text-3xl lg:text-4xl */
.heading-3    /* En lugar de text-lg sm:text-xl md:text-2xl lg:text-3xl */
.text-body    /* En lugar de text-sm sm:text-base md:text-base lg:text-lg */
.text-body-lg /* Para texto destacado */
.text-body-sm /* Para texto secundario */

/* Espaciado */
.section-spacing   /* Para espaciado entre secciones */
.container-spacing /* Para padding interno de contenedores */
.item-spacing     /* Para margin bottom entre elementos */
.grid-spacing     /* Para gaps en grids */

/* Iconos */
.icon-small   /* Para iconos peque√±os */
.icon-medium  /* Para iconos medianos */
.icon-large   /* Para iconos grandes */
```

### Paleta de Colores
```javascript
// Colores principales definidos en tailwind.config.js
primary: {
  50: "#DBEBFF",   // M√°s claro
  500: "#004EB0",  // Principal
  900: "#001024"   // M√°s oscuro
}
secondary: {
  500: "#2AAAE1"   // Azul claro
}
complemento: {
  300: "#7EF1E9",  // Turquesa para acentos
  500: "#27E7D9"   // Turquesa principal
}
```

## ‚öõÔ∏è Desarrollo React

### Estructura de Componentes
```jsx
// Estructura est√°ndar para componentes
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types'; // SIEMPRE incluir PropTypes

const ComponentName = ({ prop1, prop2, ...rest }) => {
  // 1. Estados locales
  const [state, setState] = useState(initialValue);
  
  // 2. Effects
  useEffect(() => {
    // L√≥gica de efectos
  }, [dependencies]);
  
  // 3. Funciones auxiliares
  const handleAction = () => {
    // L√≥gica
  };
  
  // 4. Render
  return (
    <div className="responsive-classes">
      {/* Contenido */}
    </div>
  );
};

ComponentName.propTypes = {
  prop1: PropTypes.string.required,
  prop2: PropTypes.number
};

ComponentName.defaultProps = {
  prop2: 0
};

export default ComponentName;
```

### Hooks y Estado
- Usar `useState` para estado local simple
- Usar `useEffect` para efectos de lado
- Implementar custom hooks para l√≥gica reutilizable
- Evitar prop drilling, considerar Context API para estado global

### Optimizaci√≥n
- Usar `React.memo` para componentes que no cambian frecuentemente
- Implementar `useMemo` y `useCallback` cuando sea necesario
- Lazy loading para rutas: `React.lazy()` con `Suspense`

## üõ£Ô∏è Routing y Navegaci√≥n

### Configuraci√≥n de Rutas
```jsx
// En AppRoutes.jsx - mantener organizaci√≥n actual
const routes = [
  { path: '/', component: Home },
  { path: '/nosotros', component: Nosotros },
  // ... m√°s rutas
];
```

### Navegaci√≥n
- Usar `Link` de react-router-dom para navegaci√≥n interna
- Usar `useLocation` para obtener ruta actual
- Implementar scroll to top en cambios de p√°gina
- Mantener estado de navegaci√≥n en Navbar

## üí´ Animaciones y Transiciones

### Librer√≠as Aprobadas
- **Framer Motion**: Para animaciones complejas de componentes
- **GSAP**: Para animaciones de scroll y elementos espec√≠ficos
- **CSS Transitions**: Para hover effects y transiciones simples

### Patrones de Animaci√≥n
```jsx
// Framer Motion - entrada de componentes
const variants = {
  hidden: { opacity: 0, y: 20 },
  visible: { opacity: 1, y: 0 }
};

<motion.div
  initial="hidden"
  animate="visible"
  variants={variants}
  transition={{ duration: 0.5 }}
>
  {/* Contenido */}
</motion.div>
```

## üñºÔ∏è Gesti√≥n de Assets

### Im√°genes
- Organizar por carpetas tem√°ticas en `/src/assets/image/`
- Usar formatos optimizados (WebP cuando sea posible)
- Implementar lazy loading para galer√≠as
- Mantener nomenclatura descriptiva: `categoria/numeracion.extension`

### Configuraci√≥n de Galer√≠a
- Usar `galeria.json` para metadatos de im√°genes
- Mantener estructura consistente:
```json
{
  "id": number,
  "src": "ruta/imagen",
  "width": number,
  "height": number,
  "caption": "string descriptivo"
}
```

## üéõÔ∏è Componentes Reutilizables

### Componentes Base (USAR SIEMPRE que sea posible)
- `Button` - Sistema de botones con variantes
- `Card` - Tarjetas informativas
- `SectionTitle` - T√≠tulos de secci√≥n estandarizados
- `FeatureSection` - Secciones de caracter√≠sticas
- `WhatsAppButton` - Bot√≥n de contacto WhatsApp
- `ActionButton` - Botones de acci√≥n vers√°tiles

### Crear Nuevos Componentes
1. Verificar si existe componente similar
2. Crear en carpeta propia con `index.js`
3. Documentar en `src/docs/COMPONENTS.md`
4. Incluir PropTypes y defaultProps
5. Seguir sistema de variantes establecido

## üì± Responsividad

### Breakpoints Tailwind
```css
/* Usar breakpoints est√°ndar */
sm: 640px   /* Tablets */
md: 768px   /* Tablets grandes */
lg: 1024px  /* Desktop */
xl: 1280px  /* Desktop grande */
2xl: 1536px /* Desktop extra grande */
```

### Patrones Responsivos
- Mobile-first approach (dise√±o para m√≥vil primero)
- Usar clases de utilidad responsiva personalizadas
- Testear en m√∫ltiples dispositivos
- Implementar navegaci√≥n m√≥vil colapsable

## üîß Buenas Pr√°cticas

### Performance
- Optimizar im√°genes antes de incluirlas
- Usar React.lazy para code splitting en rutas
- Minimizar re-renders innecesarios
- Implementar intersection observer para elementos en viewport

### Accesibilidad
- Incluir atributos `aria-label` en botones
- Usar semantic HTML
- Mantener contraste de colores adecuado
- Navegaci√≥n por teclado funcional

### SEO
- Usar t√≠tulos descriptivos en p√°ginas
- Implementar meta tags apropiados
- Estructura de headings jer√°rquica (h1 > h2 > h3)
- URLs amigables y descriptivas

## üìù Documentaci√≥n

### Documentar Nuevos Componentes
```markdown
### ComponentName
Descripci√≥n breve del componente.

\```jsx
<ComponentName
  prop1="valor"
  prop2={123}
  variant="primary"
/>
\```

Props:
- `prop1` (string, required): Descripci√≥n
- `prop2` (number, optional): Descripci√≥n, default: 0
```

### Comentarios en C√≥digo
- Comentar l√≥gica compleja
- Documentar funciones p√∫blicas
- Explicar decisiones t√©cnicas no obvias
- Mantener comentarios actualizados

## üö´ Evitar

### Anti-patrones
- ‚ùå Inline styles (usar Tailwind o clases CSS)
- ‚ùå Manipulaci√≥n directa del DOM
- ‚ùå Componentes con m√°s de 200 l√≠neas
- ‚ùå Props drilling excesivo
- ‚ùå Estado global innecesario
- ‚ùå Repetir clases de Tailwind responsivas (usar clases de utilidad)

### Dependencias
- ‚ùå No agregar librer√≠as sin aprobaci√≥n
- ‚ùå No usar jQuery o bibliotecas similares
- ‚ùå Evitar CSS-in-JS libraries (usar Tailwind)

## üîÑ Git y Versionado

### Commits
- Mensajes descriptivos en espa√±ol
- Usar prefijos: feat:, fix:, docs:, style:, refactor:
- Commits at√≥micos (un cambio por commit)

### Ramas
- `main`: C√≥digo de producci√≥n
- `develop`: Desarrollo activo
- `feature/nombre-feature`: Nuevas caracter√≠sticas
- `fix/nombre-fix`: Correcciones

## üß™ Testing

### Estructura de Tests
```javascript
// ComponentName.test.js
import { render, screen } from '@testing-library/react';
import ComponentName from './ComponentName';

describe('ComponentName', () => {
  test('renders correctly', () => {
    render(<ComponentName prop1="test" />);
    expect(screen.getByRole('button')).toBeInTheDocument();
  });
});
```

### Cobertura M√≠nima
- Componentes cr√≠ticos: 80%+
- Funciones utilitarias: 90%+
- P√°ginas principales: 60%+

---

## üìû Contacto T√©cnico
Para dudas sobre estas reglas o el proyecto, revisar documentaci√≥n en:
- `FONT_GUIDELINES.md` - Sistema de tipograf√≠a
- `IMPLEMENTACION.md` - Detalles de implementaci√≥n
- `src/docs/COMPONENTS.md` - Documentaci√≥n de componentes 